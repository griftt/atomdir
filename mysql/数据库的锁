https://www.centos.bz/2017/12/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8E%92%E4%BB%96%E9%94%81%E4%B8%8E%E5%85%B1%E4%BA%AB%E9%94%81/
## 一.  数据库的乐观锁
 ### 1.基本概念
## 二. 数据库的悲观锁
  ### 1.基本概念：认为数据会被修改，一进来就直接上锁。
    TIP：  select 默认加共享锁，且在事务完成后才会把锁释放。
     //  update delete add  :默认加排它锁，且在事务完成后才会把锁释放。
     一个表中的锁共享锁和排他锁一次只能有一种。切记是一种，因为其他select 语句进来时也会加上共享锁，同时在事务结束后才会释放。
      但一个表中的共享锁和更新锁是互相兼容的，但一次只能有一个事务拥有更新锁。


    1.共享锁（holdlock）：也称读锁，事务A对对象T加s锁，其他事务也只能对T加S，多个事务可以同时读，但不能有写操作，直到A释放S锁。
      - SELECT … LOCK IN SHARE MODE

    2.排他锁：也称写锁，事务A对对象T加X锁以后，其他事务不能对T加任何锁，只有事务A可以读写对象T直到A释放X锁。
      - SELECT … FOR UPDATE;
    3.更新锁：用来预定要对此对象施加X锁，它允许其他事务读，但不允许再施加U锁或X锁；当被读取的对象将要被更新时，则升级为X锁，主要是用来防止死锁的。因为使用共享锁时，修改数据的操作分为两步，
    首先获得一个共享锁，读取数据，然后将共享锁升级为排它锁，然后再执行修改操作。这样如果同时有两个或多个事务同时对一个对象申请了共享锁，在修改数据的时候，这些事务都要将共享锁升级为排它锁。
    这些事务都不会释放共享锁而是一直等待对方释放，这样就造成了死锁。如果一个数据在修改前直接申请更新锁，在数据修改的时候再升级为排它锁，就可以避免死锁。
    为解决死锁，引入更新锁。
例7：
----------------------------------------
T1:
begin tran
select * from table(updlock) (加更新锁)
update table set column1='hello'

T2:
begin tran
select * from table(updlock)
update table set column1='world'

更新锁的意思是：“我现在只想读，你们别人也可以读，但我将来可能会做更新操作，我已经获取了从共享锁（用来读）到排他锁
（用来更新）的资格”。一个事物只能有一个更新锁获此资格。

T1执行select，加更新锁。
T2运行，准备加更新锁，但发现已经有一个更新锁在那儿了，只好等。

当后来有user3、user4...需要查询table表中的数据时，并不会因为T1的select在执行就被阻塞，照样能查询，相比起例6，这提高
了效率。
    4.死锁
----------------------------------------
T1:
begin tran
select * from table (holdlock) (holdlock意思是加共享锁，直到事物结束才释放)
update table set column1='hello'

T2:
begin tran
select * from table(holdlock)
update table set column1='world'

假设T1和T2同时达到select，T1对table加共享锁，T2也对加共享锁，当
T1的select执行完，准备执行update时，根据锁机制，T1的共享锁需要升
级到排他锁才能执行接下来的update.在升级排他锁前，必须等table上的
其它共享锁释放，但因为holdlock这样的共享锁只有等事务结束后才释放，
所以因为T2的共享锁不释放而导致T1等(等T2释放共享锁，自己好升级成排
他锁），同理，也因为T1的共享锁不释放而导致T2等。死锁产生了。


###  数据库的行锁
####  锁的作用范围是行级别，数据库能够确定那些行需要锁的情况下使用行锁，如果不知道会影响哪些行的时候就会使用表锁。举个例子，一个用户表user，
    有主键id和用户生日birthday当你使用update … where id=?这样的语句数据库明确知道会影响哪一行，
    它就会使用行锁，当你使用update … where birthday=?这样的的语句的时候因为事先不知道会影响哪些行就可能会使用表锁。
    - SELECT … from table where id =10 ,这样就只会锁具体的行
    - SELECT … from table where name=hello ,这样就只会锁表，因为数据库不知你到底要查那些数据，所以直接把表给锁了


#### 锁的作用范围是整张表
