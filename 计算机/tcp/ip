
#### TCP/IP协议分层模型
![协议层次](images/2019/07/协议层次.png)
##### 传输层:  tcp 或 upd只有两种。
  tcp:浏览器的请求就是tcp ，会有先后顺序，需要经过3次握手
  udp：不在乎顺序，数据直接发送，对方不在数据就丢了。速度较快，容易丢包，如一些即时聊天

  1.应用层把数据丢到传输层，传输层会把数据进行包装，
  2.应用层把数据丢给传输层后，传输层把数据进行一下包装，包装纸上面写着“源端口、目的端口、序号、确认序号、检验和等TCP自身的数据”
  3.传输层在往应用层传递数据时，并不保证每次传递的数据是一个完整的应用层数据包（以http协议为例，就是并不保证应用层收到的数据刚好可以组成一个http包），
    这就是我们经常提到的半包和粘包。传输层只负责传递byte[]数据，
    应用层需要自己对byte[]数据进行解码，以http协议为例，就是把byte[]解码成http协议格式的字符串.
  4.半包和黏包
      半包：传输层向应用层传递数据包时，一个数据包分成了多次传输，导致应用层每次接收的都不是完整的数据包（就是半包）。
      黏包：传输层向应用层传递数据包时，当通信的对方把多条业务数据包放在一个TCP包中发过来时，粘包就产生了。信息太多不止如何解析。
            http协议是一来一回的，所以正常场景是不会有粘包的，但pipeline模式下是允许一方连续发多个请求的，所以会有粘包产生。
      于是当网络不好，或是消息包过大时，半包的情况就发生了，而程序并没有考虑到半包的情况，结果就是解码失败，导致消息丢失

      当通信的对方把多条业务数据包放在一个TCP包中发过来时，粘包就产生了，而程序没有考虑到一次TCP收包会收到多个业务包，从而解析到第一个业务包后把后面的业务包丢弃了
##### 传输层数据是啥
  就是应用层的数据带上一张包装纸后的数据
  这层包装纸就是传输层的元数据或叫头部数据（数据的格式就是传输层协议）
  为什么要带包装纸？因为要实名呀，现在快递都要实名了^_^
